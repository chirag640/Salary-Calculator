import { z } from "zod"

// Mirror LeaveType union from lib/types to maintain consistency.
const leaveTypeEnum = z.enum(["Sick", "Vacation", "Personal", "Holiday", "Other"]) // keep in sync with types.ts

// Common date (YYYY-MM-DD) regex
const dateRegex = /^\d{4}-\d{2}-\d{2}$/

export const timeEntryBase = {
  date: z.string().regex(dateRegex, "Invalid date format (expected YYYY-MM-DD)"),
  timeIn: z.string().optional().default(""),
  timeOut: z.string().optional().default(""),
  breakMinutes: z.number().int().min(0).max(24 * 60).default(0),
  workDescription: z.string().max(2000).optional().default(""),
  client: z.string().max(200).optional().default(""),
  project: z.string().max(200).optional().default(""),
  leave: z
    .object({
      isLeave: z.boolean(),
      leaveType: leaveTypeEnum.optional(),
      leaveReason: z.string().max(500).optional(),
    })
    .optional(),
  totalHours: z.number().min(0).max(24).optional(),
  deletedAt: z.string().datetime().optional().nullable(),
}

export const createTimeEntrySchema = z.object(timeEntryBase)
export const updateTimeEntrySchema = z.object(timeEntryBase)

export const exportRequestSchema = z.object({
  startDate: z.string().regex(dateRegex),
  endDate: z.string().regex(dateRegex),
  format: z.enum(["csv", "xlsx"]).default("csv"),
  includeLeave: z.boolean().default(true),
  clientFilter: z.string().max(100).optional(),
  projectFilter: z.string().max(100).optional(),
})

export const invoiceRequestSchema = z.object({
  startDate: z.string().regex(dateRegex),
  endDate: z.string().regex(dateRegex),
  clientName: z.string().max(100).optional(),
  projectName: z.string().max(100).optional(),
  invoiceNumber: z.string().max(100),
  notes: z.string().max(2000).optional(),
  breakdown: z.enum(["daily", "client", "none"]).default("none"),
})

export const aiReportRequestSchema = z.object({
  startDate: z.string().regex(dateRegex),
  endDate: z.string().regex(dateRegex),
  reportType: z.enum(["summary", "productivity", "client-analysis", "custom"]),
  customPrompt: z.string().max(4000).optional(),
})

// Auth related lightweight schemas
export const forgotPasswordSchema = z.object({
  email: z.string().email("Invalid email")
})

// 64 hex chars (32 bytes) token generated by crypto.randomBytes(32).toString('hex')
export const resetPasswordSchema = z.object({
  token: z.string().regex(/^[a-f0-9]{64}$/i, "Invalid token"),
  password: z.string().min(6, "Password must be at least 6 characters")
})

export type CreateTimeEntryInput = z.infer<typeof createTimeEntrySchema>
export type UpdateTimeEntryInput = z.infer<typeof updateTimeEntrySchema>
export type ExportRequestInput = z.infer<typeof exportRequestSchema>
export type InvoiceRequestInput = z.infer<typeof invoiceRequestSchema>
export type AIReportRequestInput = z.infer<typeof aiReportRequestSchema>
export type ForgotPasswordInput = z.infer<typeof forgotPasswordSchema>
export type ResetPasswordInput = z.infer<typeof resetPasswordSchema>
